// 'use client'
// import localFont from "next/font/local";
// import "./globals.css";
// import Footer from "@/components/footer";
// import { Navbar } from "@/components/navbar";
// import { ClerkProvider } from "@clerk/nextjs";
// import { usePathname } from "next/navigation";
// import { useEffect, useState } from "react";
// import Loading from "./loading";



// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

//   const pathname = usePathname();
//   const [isLoading, setIsLoading] = useState(true);

//   useEffect(() => {
//     setIsLoading(true);
//     const timer = setTimeout(() => {
//       setIsLoading(false);
//     }, 2000);

//     return () => clearTimeout(timer);
//   }, [pathname]); // Trigger effect on route change

//   // const isStudio = pathname.startsWith("/studio");
//   // const isHome = pathname.startsWith("/sign-in");
//   const isAdmin = pathname.startsWith("/admin");
//   const isOrders = pathname.startsWith("/orders");
//   const isCustomers = pathname.startsWith("/customers");
//   const isStatistics = pathname.startsWith("/product-data");
//   const isReviews = pathname.startsWith("/reviews");
//   const studioAndHome = !isAdmin && !isOrders && !isCustomers && !isStatistics && !isReviews


// // export const metadata: Metadata = {
// //   title: "Create Next App",
// //   description: "Generated by create next app",
// // };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <ClerkProvider >
//     <html lang="en">
//       <head>
//         {/* <link
//           rel="stylesheet"
//           href="https://cdn.snipcart.com/themes/v3.2.0/default/snipcart.css"/> */}
//    </head>
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >

//          {/* <div hidden id="snipcart" data-api-key={process.env.NEXT_PUBLIC_SNIPCART_API_KEY} data-config-modal-style="none"></div> */}

//         {/* <Navbar/>
//         {children}
//         <Footer/> */}
//         {(studioAndHome && !isLoading) && <Navbar/>}
//           {isLoading ? <Loading /> : children}
//           {(studioAndHome && !isLoading) && <Footer/>}

//       </body>
//     </html>
//     </ClerkProvider >
//   );
// }



'use client'
import localFont from "next/font/local";
import "./globals.css";
import Footer from "@/components/footer";
import { Navbar } from "@/components/navbar";
import { ClerkProvider } from "@clerk/nextjs";
import { usePathname } from "next/navigation";
import { useEffect, useState } from "react";
import Loading from "./loading";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pathname = usePathname();
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setIsLoading(true);
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);

    return () => clearTimeout(timer);
  }, [pathname]); // Trigger effect on route change

  const isAdmin = pathname.startsWith("/admin");
  const isOrders = pathname.startsWith("/orders");
  const isCustomers = pathname.startsWith("/customers");
  const isStatistics = pathname.startsWith("/product-data");
  const isReviews = pathname.startsWith("/reviews");
  const studioAndHome = !isAdmin && !isOrders && !isCustomers && !isStatistics && !isReviews;

  return (
    <ClerkProvider>
      <html lang="en">
        <head>
          {/* Add your head elements here */}
        </head>
        <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
          {/* Render Navbar and Footer based on `studioAndHome` */}
          {(studioAndHome && !isLoading) && <Navbar />}
          {isLoading ? <Loading /> : children}
          {(studioAndHome && !isLoading) && <Footer />}
        </body>
      </html>
    </ClerkProvider>
  );
}
